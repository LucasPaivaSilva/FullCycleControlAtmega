
CycleControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000734  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b0  00000000  00000000  00001009  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d8  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a9  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_10>:
int SemiCycleCount = 0;

#define NSemiCycles 3

ISR(TIMER1_CAPT_vect) //interrupção do T1
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	//Detecta o semi ciclo e contabiliza no cyclycount
	
	if (tst_bit(TCCR1B, ICES1))
  a2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  a6:	86 ff       	sbrs	r24, 6
  a8:	0f c0       	rjmp	.+30     	; 0xc8 <__vector_10+0x38>
	{
		clr_bit(TCCR1B, ICES1);
  aa:	e1 e8       	ldi	r30, 0x81	; 129
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 7b       	andi	r24, 0xBF	; 191
  b2:	80 83       	st	Z, r24
		SemiCycleCount++;
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c6:	0e c0       	rjmp	.+28     	; 0xe4 <__vector_10+0x54>
	}
	else
	{
		set_bit(TCCR1B, ICES1);
  c8:	e1 e8       	ldi	r30, 0x81	; 129
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
		SemiCycleCount++;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
	//Verifica o número de ciclos e dispara o SCR
	if (SemiCycleCount >= NSemiCycles)
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ec:	03 97       	sbiw	r24, 0x03	; 3
  ee:	64 f0       	brlt	.+24     	; 0x108 <__vector_10+0x78>
	{
		set_bit(PORTB, PB1);
  f0:	29 9a       	sbi	0x05, 1	; 5
		SemiCycleCount = 0;
  f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e3       	ldi	r24, 0x3F	; 63
  fc:	9f e1       	ldi	r25, 0x1F	; 31
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <__vector_10+0x6e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <__vector_10+0x74>
 104:	00 00       	nop
		_delay_ms(2);
		clr_bit(PORTB, PB1);
 106:	29 98       	cbi	0x05, 1	; 5
	}
	
}
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main(void)
{
	DDRB  = 0b11111110;	
 11a:	8e ef       	ldi	r24, 0xFE	; 254
 11c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11111001;	
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	85 b9       	out	0x05, r24	; 5
	
	TCNT1 = 0;
 122:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 126:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<ICES1);
 12a:	85 e4       	ldi	r24, 0x45	; 69
 12c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<ICIE1);
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
 136:	78 94       	sei
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x1e>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
